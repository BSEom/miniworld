import React, { useEffect, useRef, useState } from 'react';
import './MiniRoom.css';
import { getThemeClass } from '../utils/Theme';

const MiniRoom = (todayMood) => {
  const boardRef = useRef(null);  // board Ï†ïÎ≥¥ Ï†ëÍ∑ºÏö©
  const imageRefs = useRef({});   // image Ï†ïÎ≥¥ Ï†ëÍ∑ºÏö©
  const draggingRef = useRef({ isDragging: false, offsetX: 0, offsetY: 0, targetId: null });  // ÎìúÎûòÍ∑∏ Ï§ëÏù∏ ÏöîÏÜå Ï†ëÍ∑ºÏö©
  const [positions, setPositions] = useState({});   // ÏúÑÏπò Ï†ÄÏû•Ïö©
  const [flippedItems, setFlippedItems] = useState({}); // object Î∞òÏ†Ñ Ïó¨Î∂Ä Ï†ÄÏû•Ïö©
  const [grabbingId, setGrabbingId] = useState(null); // ÎìúÎûòÍ∑∏ Ï§ëÏù∏ obj id Ï†ÄÏû•Ïö© 
  const [selectedId, setSelectedId] = useState(null); // ÏÑ†ÌÉù object id Ï†ÄÏû•

  // ÏµúÍ∑º Î∞©Î¨∏Ïûê
  const recentVisitors = [
    { name: 'Ï†ïÌòÑ', status:'Ïò®ÎùºÏù∏', time: '2Î∂ÑÏ†Ñ', avatar: 'üòä', mood:'ÏßëÏóê Í∞ÄÍ≥† Ïã∂Ïñ¥Ïöî...' },
    { name: 'ÏùÄÏßÄ', status:'ÏûêÎ¶¨ÎπÑÏõÄ', time: '5Î∂ÑÏ†Ñ', avatar: 'üòÑ', mood:'ÎìúÎùºÎßà Î≥¥ÎäîÏ§ë...' },
    { name: 'ÏÑúÏòÅ', status:'Ïò§ÌîÑÎùºÏù∏', time: '1ÏãúÍ∞ÑÏ†Ñ', avatar: 'üòâ', mood:'bye byeü§ö' },
    { name: 'Î≥¥ÏÑ±', status:'Ïò®ÎùºÏù∏', time: '3ÏãúÍ∞ÑÏ†Ñ', avatar: 'ü§ì', mood:'ÏïàÎÖïÌïòÏÑ∏Ïöî' }
  ];
  // ÏùºÏ¥å ÏπúÍµ¨
  const ilchonFriends = [
    { name: 'Ï†ïÎØº', status: 'Ïò®ÎùºÏù∏', avatar: 'üòé', mood: 'ÌñâÎ≥µÌï¥Ïöî~' },
    { name: 'ÏùÄÌù¨', status: 'ÏûêÎ¶¨ÎπÑÏõÄ', avatar: 'ü§ó', mood: 'ÎØ∏Í∂ÅÍ≤åÏûÑ ÌïòÎäîÏ§ë..' },
    { name: 'ÌòúÎπà', status: 'Ïò®ÎùºÏù∏', avatar: 'üòã', mood: 'Í≥µÎ∂ÄÏ§ë..' },
    { name: 'ÌòúÎØ∏', status: 'Ïò§ÌîÑÎùºÏù∏', avatar: 'üò¥', mood: 'bye byeü§ö' }
  ];
  // ÎØ∏ÎãàÎ£∏ ÏïÑÏù¥ÌÖú Ïù¥ÎØ∏ÏßÄ Î™©Î°ù
  const imageList = [
    { id: 'img1', src: 'img/miniroom/table.gif', flipped: false },
    { id: 'img2', src: 'img/miniroom/window.gif', flipped: false },
    { id: 'img3', src: 'img/miniroom/chair.gif', flipped: false, width: 33 },
    { id: 'img4', src: 'img/miniroom/ddd.gif', flipped: false }
  ];
  // Ï¥àÍ∏∞ ÏúÑÏπò Î°úÎìú
  // useEffect(() => {
  //   const saved = {};
  //   imageList.forEach(({ id }) => {
  //     const data = localStorage.getItem(id);
  //     if (data) {
  //       saved[id] = JSON.parse(data);
  //     } else {
  //       saved[id] = {
  //         left: Math.random() * 300,
  //         top: Math.random() * 200,
  //       };
  //     }
  //   });
  //   setPositions(saved);
  // }, []);


  useEffect(() => {
    const savedPositions = {};
    const savedFlips = {};

    imageList.forEach(({ id, flipped }) => {
      const data = localStorage.getItem(id);
      if (data) {
        const parsed = JSON.parse(data);
        savedPositions[id] = {
          left: parsed.left,
          top: parsed.top
        };
        savedFlips[id] = parsed.flipped ?? false;
      } else {
        savedPositions[id] = {
          left: Math.random() * 300,
          top: Math.random() * 200
        };
        savedFlips[id] = flipped;
      }
    });

    setPositions(savedPositions);
    setFlippedItems(savedFlips);
  }, []);

  const handleMouseDown = (e, id) => {
    
    draggingRef.current = {
      isDragging: true,
      offsetX: e.nativeEvent.offsetX, // (Î∏åÎùºÏö∞Ï†Ä ÏõêÎ≥∏ Ïù¥Î≤§Ìä∏) Ïã§Ï†ú ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ ÏúÑÏπò 
      offsetY: e.nativeEvent.offsetY,
      targetId: id
    };
    setGrabbingId(id);
    setSelectedId(id);
  };

  const handleMouseMove = (e) => {
    const { isDragging, offsetX, offsetY, targetId } = draggingRef.current;
    const el = imageRefs.current[targetId];

    if (!isDragging || !targetId) return;

    if (!el) return;

    const boardRect = boardRef.current.getBoundingClientRect();     // boardÏùò ÌÅ¨Í∏∞, ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏôÄ Ï†ÄÏû•
    let newLeft = e.clientX - boardRect.left - offsetX;     // ÎìúÎûòÍ∑∏ Ï§ëÏù∏ objectÏùò ÏúÑÏπò Ï°∞Ï†ï
    let newTop = e.clientY - boardRect.top - offsetY;

    newLeft = Math.max(0, Math.min(newLeft, boardRef.current.offsetWidth - el.offsetWidth));
    newTop = Math.max(0, Math.min(newTop, boardRef.current.offsetHeight - el.offsetHeight));

    setPositions(prev => {
      const updated = { ...prev, [targetId]: { left: newLeft, top: newTop } };
      localStorage.setItem(targetId, JSON.stringify(updated[targetId]));
      return updated;
    });
  };

  const handleMouseUp = () => {
    draggingRef.current.isDragging = false;
    setGrabbingId(null);
  };

  const handleClickDelete = () => {
    console.log("ÏÇ≠Ï†ú ÌÅ¥Î¶≠Ìï®");
  };

  const handleClickTurn = (id) => {
    console.log("Î∞òÏ†Ñ ÌÅ¥Î¶≠Ìï®")
    setFlippedItems(prev => {
      const updated = {
        ...prev,
        [id]: !prev[id]
      };

      // Ï†ÄÏû• ÏúÑÏπòÎèÑ Ìï®Íªò Î∞òÏòÅ(localstorage Í∏∞Ï§Ä)
      const saved = JSON.parse(localStorage.getItem(id));
      localStorage.setItem(id, JSON.stringify({
        ...saved,
        flipped: updated[id]
      }));

      return updated;
    });
  };

  const handleClickClose = () => {
    console.log("Îã´Í∏∞ ÌÅ¥Î¶≠Ìï®")
    setSelectedId(null);
  }

  const handleBoardClick = (e) => {
    if (e.target === boardRef.current) {
      handleClickClose();
    }
  };

  return (
    <div className="miniroom_container">
      <div
        className="board"
        ref={boardRef}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onClick={handleBoardClick}
      >
        {imageList.map((item) => (
          <div 
            key={item.id}  
            className='img_frame'
            style={{
                position: 'absolute',
                left: positions[item.id]?.left || 0,
                top: positions[item.id]?.top || 0,
                // cursor: grabbingId === item.id ? 'grabbing' : 'grab'
            }}
            ref={(el) => (imageRefs.current[item.id] = el)}
          >
            {selectedId == item.id && (
              <div className='toolbar'>
                <button id='btn_delete' onClick={handleClickDelete}></button>
                <button id='btn_turn' onClick={() => handleClickTurn(item.id)}></button>
                <button id='btn_close' onClick={handleClickClose}></button>
              </div>
            )}

            <div className='draggable-box'
              onMouseDown={(e) => handleMouseDown(e, item.id)}
            > 
              <img
                key={item.id}
                id={item.id}
                src={item.src}
                alt={item.id}
                className={`draggable ${flippedItems[item.id] ? 'flipped' : ''}`}
                draggable={false}
              />
            </div>
          </div>
          ))}
        </div>
      <div className='rightbar'>

      {/* ÏùºÏ¥å ÏπúÍµ¨ */}
      <div className="friends-card">
        <div className={`card-header ${getThemeClass(todayMood.todayMood)}`}>
        <span>üíï ÏùºÏ¥å ÏπúÍµ¨</span>
        </div>
        <div className="card-body">
          <div className="friend-list">
            {ilchonFriends.slice(0, 4).map((friend, index) => (
              <div key={index} className="friend-item">
                <div className="friend-avatar">
                  <span className="friend-avatar">{friend.avatar}</span>
                  <div className={`status-dot ${friend.status === 'Ïò®ÎùºÏù∏' ? 'online' : friend.status === 'ÏûêÎ¶¨ÎπÑÏõÄ' ? 'away' : 'offline'}`}></div>
                </div>
                <div className="friend-info">
                  <p className="friend-name">{friend.name}</p>
                  <p className="friend-mood">{friend.mood}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* ÏµúÍ∑º Î∞©Î¨∏Ïûê */}
      <div className="visitors-card">
        <div className={`card-header ${getThemeClass(todayMood.todayMood)}`}>
        <span>üëã</span>
        <span>ÏµúÍ∑º Î∞©Î¨∏Ïûê</span>
        </div>
        <div className="card-body">
          <div className="visitor-list">
            {recentVisitors.slice(0, 3).map((visitor, index) => (
              <div key={index} className="visitor-item">
                <div className="visitor-avatar">
                  <span className="avatar">{visitor.avatar}</span>
                  <div className={`status-dot ${visitor.status === 'Ïò®ÎùºÏù∏' ? 'online' : visitor.status === 'ÏûêÎ¶¨ÎπÑÏõÄ' ? 'away' : 'offline'}`}></div>
                  </div>
                <div className="visitor-info">
                  <p className="visitor-name">{visitor.name}</p>
                  <p className="visitor-mood">{visitor.mood}</p>
                  <p className="visitor-time">{visitor.time}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
  );
};

export default MiniRoom;
